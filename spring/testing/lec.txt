--Lecture 1
1/23/17
review chapter 1 for next class
Discrete math review + ch1

Proposition -- statement that's true or false

proposition for any nonnegative integer n
  n**2 + n + 41 is prime.
  p(40) = 40**2 + 40 + 41    false statement, but a proposition nontheless.

proposition Euler's conjecture 1769
a^4 + b^4 + c^4 = d^4 no solution when a, b, c, d > 0.
(a,b,c,d) = (95800,217519,414560,422481)

proposition Fermat's last theorem 1630
there are no positive integers 
x,y,z such that x^n + y^n = x^n where n > 2.
true

proposition Goldbach's conejecture. 1742
every even integer > 2 is the sum of 2 primes
holds true for all nunmbers up to 10^18. we don't know yet.

Predicate -- proposition whose truth value depends on some variable(s)
p(n) = "n is a perfect square."
under what circumstances is that statement true?

Logical Deduction
Rule
 p, p->q, then q. // implication  (!p || q)

example proof:
Given any x : x <=2 && x >= 0
x, 2-x, 2+x are >= 0
therefore, their product is also >= 0.
Adding 1 to the number gives a + number
x(2-x)(2+x) + 1 > 0.
x(4-x^2) + 1 > 0.
-x^3 + 4x + 1 > 0.

Prove the contrapositive:
  p -> q logically equivalent to ~q -> ~p  (~(p && ~q))

If r is irrational, then sqrt(r) is also irrational
proof:
We prove the contrapositive,
Suppose sqrt(r) is rational.
Then, there exist integers m, n such that sqrt(r) = m/n.
then, r = sqrt(r) * sqrt(r) = (m^2 / n^2).
m^2 and n^2 are also integers, so r is rational.

prove p<->q<-> by showing p = q = r
show p<->q  and q<->r
can also show p->q q->r r->p

proposition p, q
!p
p&&q
p||q
p->q
p<->q
pXORq

* SAT Problem -- Important for testins
  given some formula
  (p||q&&r)
     find values for p, q, r such that the formula is true.
  solution:
  	(p,q,r) = (t,f,f)


--Lecture 2
1/25/17
SAT problem can yield many, one, or zero solutions.
sets, relations, functions, induction...
set -- bunch of elements or objects.
examples:
D = { 1, 2, 4, 8, ... }

union:
  x \in A U B <=> x \in A or x \in B
intersection:
  x \in A ^ B <=> x \in A and x \in B
difference:
  x \in A - B <=> x \in A and not x \in B
power set:
  set of all subsets

sequence -- list of objects
  (a, b, c)   or  [a, b, c]
  lists have an ordering, and we can have permutations.
  "what is the first element in the list?"
  lists can also have repetition   (a, b, a, c)
  write a list as a set: {(0, a), (1, b), (2, a), (3, c)}
  
Functions -- f: A -> B
  set A = domain. set B = codomain.
  sq : N -> N
  sq(0) = 0, sq(4) = 16
  N = { 0, 1, 2, 3, ... }

  sqrt: R->R+

Relations -- r: A x B
  r is a relation between A and B.
  r = {(a, 1), (a, 3), (b, 2)}

  reflexive:
  r: A x A
  (for all a \in A, (a, a) \in r)
    ==: N X N  is reflexive.
  
  symmetric:
  for all a, b \in A,
  (a, b) \in r <=> (b, a) \in r

  transitive: 
  ((a, b) \in r and (b, c) in r => (a, c) in r).

  <=: N X N
  { (0, 0), (0, 1), (1, 1), (1, 2), ... }
  reflexive and transitive. not symmetric...

for testing use: 
traversing a graph, keeping track if you're in a cycle or not with Collections style add...


java.lang.Object
bool Object::equals(Object &other);
equals method MUST implement an equivalence relation.
  reflexive, symmetric, and transitive...

--Lecture 3
Induction, then book concepts...
Induction principle: 
Let P be a predicate on nonnegative integers.
if: 
	1) P(0) is true 
	2) P(n) -> P(n+1) for all non negative integers.
then P(m) is true for all nonnegative integers m.

Theorem, for all nonnegative integers n,
	1+2+3+...+n = (n)(n+1)/2

proof:
base case : P(0) is true. (lhs == rhs == 0)
inductive step: 
supose P(n) is true,
then 1+2+3+...+n = (n)(n+1)/2.
then for n+1,
1+2+3+...+n+n+1 = (n)(n+1)/2  +  n+1
= ((n)(n+1) + 2(n+1)(n+1)) /2 = (n+2)(n+1)/2


False theorem.
All horses are the same color
In every set of n>=1 horses, all the horses are the same color.
(n is a nonnegative integer)
once you have a predicate in n, you can attempt induction.
bogus proof of theorem:
base case: n = 1. for any set of 1 horse, there is only 1 color, and the horse is the same color as itself.
indcuction:
left n>= 1, and assume P(n)
consider the a set of n+1 horses:
h1,h2,...,hn,h(n+1)
we need to prove that these n+1 horses are the same color.
by our assumption, first n horses are the same color.
also, by our assumption, the last n horses are the same color.
h2,...,hn.h(n+1).
so, h1 is the same color h2,....,hn, and h(n+1) is the same color as h2,....,hn.
therefore, h1 is the same color as h(n+1).

what if there are just 2 horses?
the two sets are disjoint, no intersection / overlap.
the following logic is invalid on that claim...

Chapter 1:
activities of a test engineer.
traditional based on software activity. beizer's testing levels based on process maturity.
testing basics and coverage criteria for testing.

activities of a test eng:
design tests by creating reqs. transform from reqs into values and scripts that execute. tests.
execute software under test, evaluate results of the test.

acceptance testing: check if the software acceptable to the user
system: check system as a whole.
integration testing: check interactions among different modules. 
module testing: check how each module behaves.
unit: check how small units of code behave individually.

Beizer's testing levels high to low...
testing is a mental discipline that helps software professionals dev higher quality software.
purpose not to prove anything specific, but to reduce the risk of using the software.
show software doesn't / does work.
no diff between testing and debugging

--  validation and verification
validation: process of evalutating software at end of dev to ensure compliance with intended usage
	Are we building the right system?
verification: process of determining whether products of a given phases of dev process fufill the reqs established during previous phase.
	Are we building the system right? Is the implementation correct given the system design?

fault: incorrect line of code
error: (unobserved) incorrect states caused by faults 
failures - (observed) output errors caused by incorrect, error states.

thre conditions must be  satisfied for a failure to be observed.
reachability: must be reachable in the code.
infectability: executing fault must lead to an incorrect state.
propogation: error state must propogate to an incorrect output.

observability: how easy is it to observe behavior in terms of outputs.
effects on environment and hardware/software components.

controllability. how easy to provide the program the needed inputs in terms of values, ops, and behaviors.

test requirements - specific elements of software artifact our test case must cover / satisfy.
some reqs infeasible

coverage criterion: rule or collections of rules that impose test reqs on test suites. 
coverage: given TR for a covereage criterion C, test suit T satisfies C if and only if for each tr in TR, at least one test in T satisfies tr.

Coverage level: given reqs TR and test suite T, coverage level is #reqs satisfied by T / |TR|

--Lecture 4
error: failure state in the program that can't be seen from the outside.
some errors propogate to failures, some do not.

reachability, infection, and propogation.

*understand the basic idea of coverage...
coverage level - # reqs satisfied by T / |TR|
test requirement - specific element of the program that a test case must cover / satisfy.
coverage criterian - rule or collection of rules that impose test reqs on a test suite.
coverage : given test reqs TR for criterion C, test suite T satisfies C if and only if for each tr in TR, at least one test in T satisfies tr.
100% code coverage does NOT imply zero faults

assertTrue(...);


Subsumption
criterion C1 subsumes criterion C2 if and only if every test suite that satisfies C1 also satisfies C2
must be true for EVER test suite...
ex. branch coverage and statement coverage
if a suite covers every branch, then it covers every statement.
black-box: derive from external descriptions, specs, design, requirements
white box: devive from source code internals: branches, conditions, statements.

criteria to define criteria,
cfgs, logical expression, syntactic structure, input domain characterization.

Chapter 2:
define test requirements using graph elems.
create a graph abstraction. ex, control-flow.
evaluate how test execution paths cover test requirements.
No ⊆ N is a set of initial nodes.    Nf ⊆ N is a set of final nodes.



--Lecture 5
HW1 is out on canvas.
graphs are used to abstract the software artifact to test.

**Syntactically reachable if there exists a path from m to n.
let reach(x) be set of nodes reachable from x. (connected component.
can define rreachability from a set of nodes too.
Union of reachablity for the individual nodes.
you can also define reachability on an edge...

**test path - a path p  (poss of length 0) 
starts at an initial node, ends at a final node.
deterministic code, each test executes a unique path.
non deterministic code, each test may execute multiple paths.  (randomization)
p visits n if n is on p. p visits e if e is in p.
path(t) for test path executed by test t.
suite T, path(T) = { path(t) | t ∈ T }


nondeterministic programs - randomization, multiple threads, garbage collection.
hash sets, different implementations of the set interface. not guaranteed a specific execution order in a loop.
If your program makes decisions on some  nondeterministic quality, you will likely have faults in your code.

2 common forms of test criteria - structural graph coverage and data flow coverage.
test req is met by visiting a particular node or edge or touring a particular path.
Graph coverage - given test reqs TR for a graph criterion C, test suite T sat C iff there is some path that meets t.

structural coverage
nod - for each node in reach(N0), TR contains predicate "visit n"
edge - TR contains each reachable path of length up to 1 (inclusive) in G
let tests t1 and t2 be such that: path(t1) = <n0, n1, n2> and path(t2) = <n0, n2>
{t1} gives node coverage, {t1, t2} gives edge coverage.

edge-pair coverage. tr contains each reachable path of up to length 2 of G
prime path - is a simple path that is not a proper subpath of another simple path
prime path coverage - TR contains each prime path in G
	- elegant way to treat loops
complete path coverage - covers all paths in G.

*****Algorithm for finding prime paths : *****
start with paths of length 0, extend to length 1.
prime path - MAXIMAL simple path that CANNOT be EXTENDED without losing its simplicity.
prime paths, no mention of iterating a loop more than once. requires to skip a loop, do a loop once, do a loop more than once.
sometimes, satisfying a requirement EXACTLY is hard. side trips and detours...
tours - test path tours q if q is a subpath of p.
tour with sidetrips - p tours q w. sidetrips if every edge in q is also in p in order.
tour with detours - p tours q with detours if every node in q is also in p in order.


Data flow criteria
focus on data values
def- location where value of a var is stored in memory
use - location where value is accessed.
def(x) and use(x). vars definied and used at an edge or node
du-paths and def-clears paths. 

label the nodes in terms of defs and uses.
all defs, all uses, all du paths.

Check out his subsumption slide on canvas!!

-- Lecture 6
Up to and including today's class.
Graph coverage for design specs use-cases.
to practice: look over textbook problems. sets, relations, and graphs could be covered.
Chapter 1 and 2 will be on the exam. not chapter 3.
dataflow criteria
1 def, 2 uses.
All uses coverage subsumes edge coverage.
know the control flow graphs for if, else, while, and for loops

def - occurs for a variable x if:
	x appears on lhs of assignment. 
	x is a formal parameter (implicit def when it executes)
	x is an input from the console.
	can be complex for arrays and references. 
	last def is the one that matters.

use - occurs for a variable x:
	x appears on rhs of assignment.
	x appears in a condition
	x is an actual parameter in method invocation
	x is an output
	x appears in the body of the return statement.

"If def and user for a var a happens on the same node n, (n , n) is a du-pair if def occurs after the use && the node is in a loop."

variable nesting can complicate CFGs.
DU Pairs formed for stats. 
each row represents variables. 
def before uses don't count as DU pairs.
def after use in a loop COUNTS as a vaild du pair.
"include only def-clear path, different scope for i.
no path through graph "
38 du paths for stats, but only 12 unique.

2.4 - graph coverage for design elements.
focus: couplings - measure dependency relations between units and focus on interconnections.
faults in one unit may effect the coupled unit.
call graph - nodes represent methods and edges rep invocations. 
method coverage - each method be invoked at least once.
call coverage - each invocation in code can be executed at least once.

inheritence hierarchies and polymorphism.
coverage requires object creation. by itself, it's weak.
parameter coupling - parameters are passed in calls.
shared data coupling - two methods access the same data object as a global
external device coupling - two methods access the same external medium (file system)

parameter coupling
caller- method that invokes another method
callee - method invoked
call site - statement that makes the call
actual param - value passed at call site.
formal param - variable in method decl
look at the last def in caller with first use in the callee

shared data coupling
m calls a nd b
a calls e
b calls f
e defines
f uses

2/5 graph coverage for specs
sequencing constraints - restrictions on the order in which methods may be invoked.
implicit or explictly expressed.
implicit preconditions and posconditions.

static checking where all paths in a client are checked for conformance to constraints.
dynamic checking - test requs consist of constraint violation. if a test meets req, a bug is found.

example  file-ADT
open must be exec before every write
open must be exe before close
write must not be after close unless open before
write before every close
close must not be done after a close unless open in between
open must not be done after open unless a close before.

exxample test requirements. get a test exec that violates a constraint.
cover every path from start of write to such apath with no open node.

-- Lecture 7
Graph Logic (3.1 and 3.2 today)
ch2 cfgs, ch3 if-conds, ch4 input-domain / sorted array, syntactic structs ch5.

predicate - any expr that evals to a boolean value. ex. ((a > b) || C) && p(x)
clause - predicate that contains no logical operator. ex. (a > b), C, or p(x).  smallest form of a predicate.
3.2 logic expr coverage criteria:
P: set of predicates
C: set of clauses in predicates P

Predicate Coverage:
for each p in P, TR contains two reqs.  p evals to true    and    p evals to false.

Clause Coverage:
for each c in C, TR contains two requirements  c evaluates to true and c evaluates to false.

**PC does not subsume CC and CC does not subsume PC!!!

Combinatorial coverage:
Cp set of clauses in predicate p
for each p in P, TR has test reqs for the clauses in Cp to evaluate each possible combo of truth values.
"Multiple condition coverage"

example: !a||b
a	b	!a||b
f	f	T
f	t	t
t	f	f
t	t	t

root of coverage criteria tree. requires 2^n test reqs.


Determination
apture the effect of each clause using a reasonable number of tests.
"Where does flipping a clause flipp a predicate? How does a clause determine the predicate?"
major and minor clauses. ci and cj (i != j)
Determination: 
major clause ci determines the predicate p 
if the minor clauses have values such that changing the value of ci changes the value of p.

Active Clause coverge:
TR has two reqs for each active clause ci in Cp for each p in P. ci evals to true and ci evals to false.
ex. p = a || b
a determines p iff b is false. likewise for b.
4 requirements
ci = a:{<(a,b)=(t,f)>, <(a,b)=(f,f)>}
ci = b:{<(a,b)=(f,t)>, <(a,b)=(f,f)>}
2 of these requirements are identical, so 3 reqs in total!.

CACC and RACC
RACC: minor clauses must be the same when ci is true as when ci is false.

example: a && (b||c)
a determines p when (b||c) is true: <b,c> in {(t,t), (t,f), (f,t)}
CACC: pick one of {1, 2, 3} and {5, 6, 7}
RACC: {1, 5},   {2, 6}, {3, 7}
Are the minor clauses values such that the major clause is active??

Inactive Clause Coverage:
check that changing a clause that should not affect the predicate .. does not affect it.
for each p in P and each major clause ci in Cp, choose minor clauses cj such that ci does not determine p.
TR has 4 reqs for ci.
ci evals to true with p true.
ci evals to false w p true
ci evals to true w p false
ci evals to false w p false.

look at the subsumption graphs!.

Complete Clause Coverage
restricted active	restricted inactive
correlated active	general inactive
clause coverage	 x	predicate coverage

corr active and gen active both consume clause and pred coverage.

Make a clause determine a predicate:
let p be a predicate and let c be a clause in p.
let ptrue = p with c set to true
let pfalse = p with c set to false.
then solutions to formula ptrue XOR pfalse give values for minor clauses such that major clause c determines p.
example: p = a || b
make a active, so pa = patrue XOR pafalse
	= true || b  XOR  false || b
	= true XOR b
	= !b
there is one solution to pa, b must be false.
thus, setting b to false makes clause a active.by symmetry: pb = !a.

another: a <-> b
pa = (true <-> b) XOR (false <-> b)
	= b XOR !b
	= true.
b can be anything, and a is the active clause.
by symmetry, pb = true.


interesting example: a&&b || a&&!b
pb = aXORa = false
there is no value for a which will be a solution
no value for a that makes b active!

with 3 clauses: a&&(b||c)
pa = (b||c)XORfalse
= b||c
three solution pairs, tt, tf, ft.
exercise: make b active.


test example
1. identify the fault
fault is a static software defect
failure is an external incorrect behavior with respect to a spec.
x <= 0 instead of x < 0.

if you dont execute the fault, "you don't see a failure."
example : {}

executes fault without failur
example : {1 , 2, 3}

executes with fault and failure
example: {0, 2}
returns true, but should return false.

you can have a program which is faulty with no failure on certain executions.

--Lecture 8
notes on sheet.
--Lecture 9
find paths from prestate to poststate.
predicates and specifications.
informal and formal
mapping problem variables between state machine and program.

-- Lecture 10
this week : chapter 4.
instead of looking at the implementation lvl details in source code,
we will look at the API.
Domain d, partitioning scheme q.
input domaind modeling (IDM).

blocks must be pairwise disjoint. (bi and bj for i!=j  is empty set)
blocks are complete. (union to the set)

input domain - set of all possible values for an integer. 
coverage criteria provide a way to partition the input space according to the test req. ex. "all inputs that execute the same path."
all inputs in a block are equally useful.

ch2 and 3 and white-box level. ch4 is black-box level. 
consider each param domain seperately. partition each domain into blocks.
identitfy a rep value for each block. combine blocks and strategies according to serveral criteria.
find "characteristics" in the input

is "order of the file" a valid characteristic?
no. what if the file is of length 1?

model the input domain in five steps.
identify functionality, ex method under test. create an IDM, scope based on inputs. apply a test criterion to form block combos. one block char at a time. 
interface-based. only at interface level in isolation. easy to define tests, but ignores param relationships.
functionality-based.  considers characteristics based on intended functionality to incorporate domain knowledge.
can utilize reqs and specs in idm, but requires more effort.

int triang(int side1, int side2, int side3);
interface-based: relation of side to 0. 
functionality-based: type of the triangle.

how to choose characteristics: 
relation of param with special values like 0, null, or empty.
consider aliasing possibilities. use preconditions and postconditions.
more blocks -> more tests!

** LEARN pairwise coverage.!!

-- Lecture 11
input domain characterization.
which combinations do we choose values from?
- All Combinations Coverage (ACoC): All combinations of blocks from all chars must be used.
number of tests is product of number of blocks in each characteristic.

- Each Choice Coverage (ECC): One value from each block for each characteristic must be used in at least one test case. Number of tests is the least number of blocks in the largest characteristic. 

- Pairwise Coverage (PWC): A value from each block for each characteristic must be combined with a value from EVERY block for each other characteristic. number of tests is at least the product of the two largest characteristics.

pick any pair (ex. > 1 for first, == 0 for 2nd) you can find a test.

- T Wise coverage (TWC): a value from each block for each group of t characteristics must be combined. pairwise is quite useful. going to 3 or 4 might not provide that much more benefit compared to increasing cost.

** Important::::
Base Choice Coverage (BCC): 
A base choice block is chosen for each characteristic, and a base test is formed by using the base choice for each characteristic. Hold all but one base choice constant and using each non base choice in each other characteristic. 
number of tests is one base test + one test for each other block. 
1 + ni*sum(bi - 1). 

fix two characteristics. let the third take all the other non base choice values. 

** study the subsumption graph
constraints among partitions:
some block combos are infeasible. ex. invalid and scalene.
constraints capture feasibility properties.
a block from one char cannot be combined with a specific other block
or maybe it can ONLY be combined with a spec other block

-- Lecture 12
made use of how it's written. 
Now, we will make modifications to the source code.
behavior of tests on many variations of a program.
syntax-based testing.

using a grammar ( or regex ) to specify test inputs. basics of mutation.
program-based grammars. integration and oo testing. 
language - set of strings
examples: java language - set of all strings that are valid java programs.
language of primes - set of all decimal digit strings that are prime numbers
language of java keywords - {"abstract", "assert", "boolean", "break", ...}
. - concatenation a|b = {"a", "b"}
| - alternation (a|b).a = {"aa", "ba"}
e - epsilon is ""
repetition(*) 0+ repetitions. it's unbounded.
a* = {"", a, aa, aaa, ... }
((a | b) . a)* = {"", "aa", "ba", "aaaa", "aaba", "baaa", "baba"}

each regex represents a language. each lang is a set of strings.
language consists of strings which are test cases. 
a language where each string is  a JUnit test case. 

example:
SLList class    add(int x)   remove(x)

regex ((add.0) | (remove.0))*
gives an abstract rep of a large test suite. VERY LARGE
""  
"add 0"
"remove 0"
"add 0 add 0"
"remove 0 remove 0"
"add 0 remove 0"
"remove 0 add 0"
...


translate it to java code
SLList l = new SLList();
l.add(0);
l.remove(0);
...


context free grammar - defines a language using a set of productions of the form sym -> sym -> syym`u
lhs is a non-terminal
each sym is terminal or non terminal
one symbol is distinguished as the start symbol
| indicates a choice
sym* - 0 or more reps of sym
sym+ - 1 or more reps of sym
sym^k - exactly k reps of sym
sym^m-n - at least m and at most n repetitions

RECOGNIZERS - DECIDE IF THE STRING IS IN THE LANGUAGE
GENERATORS - CREATE STRINGS THAT ARE IN THE LANGUAGE
TEST INPUT GENERATION
EXAMPLE DERIVATION:
	S -> M
	-> I N
	-> ADD N
	-> ADD D1-3
	-> ADD D
	-> ADD 0

example grammar
S is the start symbol
S->M
M->n
I-> add | remove
N-> D^1-3
D-> 0|1|2|3|4|5|^|7|8|9

Terminal symbol coverage (TSC) Each terminal shows up in at least one test.
production coverage(PDC) - TR contains each production in the grammar.
derivation coverage(DC) - contains every string that can be derived from the grammar. impractical to use. 

** Mutation - to generate invalid inputs
using a grammar as a generator allows generating strings that are in  the language. calid inputs
sometimes invalid inputs are needed to check exception handling behavior or observe failures
invalid inputs can be created using - mutation   (syntactic modification)

mutate symbols in a ground string    add 0 -> remove 0
ground string - only consists of terminals. 
mutate grammar and derive ground strings    ex I->"add | remove"      --->   I -> "add | delete"

read the book!!!!


-- Lecture 14
* next exam March 22nd. Closed book & no cheat sheets.   
covers material up and until today.
* PSET 2  is due on the 20th at 11:59pm

use a grammar to specify test inputs.
using a grammar as a generator allows generating strings that are in the langugage. ie. valid inputs.
sometimes invalid inputs are needed. created using mutation. syntactic modification.   mutate symbols in a ground string or mutate grammar and derive ground strings. 
mutation operator = rule that specifies variations of strings generated from a grammar. 
mutant - result of one application of a mutant operator. mutant may be in L or not in L . mutate inputs to programs or mutate the programs themselves. 
mutation adequate test suite distinguishes a program from its mutants. 
programs good at finding syntactic variations are good at finding real program faults.

if the mutant is an equivalent mutant, it cannot be killed. 

insight: in practice, if software has a fault, there will usually be a set of mutants that can only be killed by a test case that also detects that fault. 

approach: given a program p,
1) create mutants for p
2) remove redundant ones if possible
3) generate a test suite for p
4) run each test on p and its mutants to check mutant killing. 
5) compute the mutation score for the test suite
6) check p's outputs for tests that kill some mutants. 

Lecture X:
hw3 optional hw4 due april 12th 11:59pm
final exam in PAI 3.02
read section on test process.

integration testing: tests interfaces among components (that are aleady unit tested)
scaffolding, extra code to support integration and testing.
stub - emulates unimplemented functionality.
driver - emulates calls to code under test.

stubs emulate functionality that llows testing
return some sort of useful value. that's the preffered approach.
you can transform a check /  formal specification into a valid output from it.
ex. loop over possible inputs with a check for the input value pair when the method is called.


CTO problem what order to integrate and test?
OO programs, classes have many dependencies. class using methods of another, inheriting from another, aggregatins objs of another.
may have cycles, C calls D and D calls C.
try to break cycles and minimize stubbing overall. stubbing is expensive.

test plans. for the tests:
how they're created.
why they're created.
how they're run.

bigger picture on how to run the testing process.
use the ieee template.

oracle problem: is the output correct?
hard problem to solve. 4 techniques.
direct verification, redundant computations, consistency checks, data redundancy.

redundant computation
have another developer develop the other method
compare outputs

data redundancy
use your understanding of how the method works
switch the data but the output is the same. 



nondeterministic initialization.
Verify.getInt(0, 2) initializes to 0, 1, and 2. 
nondeterministic.
spits out a failure if one occurs across all 3 executions.

download java path finder
http://babelfish.arc.nasa.gov/trac/jpf/


-- Lecture week 12a
threads, test input gen with symbolic execution, bunch of other stuff.
symbolic execution: 
technique for executin a prog based on symbolic input values.
systematically explores bounded execution paths. for each path, build a path condition. checks satisfiability of path condition. 
"this symbol captures all inputs to the program."
x = X ; y = Y
X >? Y // consider both branches
([ X <= Y ]) END	[ X > Y ] x = X + Y;
					[ X > Y ] y = X + Y - Y = X;
					[ X > Y ] x = X + Y - X = Y;
					[ X > Y ] Y - X  >? 0
					[ X > Y, Y - X <= 0 ] END		[ X > Y, Y - X > 0] assert false!;
[ path conditions ] satisfy the path condition to execute that path. 
look for contradictions. perform execution on only symbolically possible paths.

--Lecture web application testing.
ps5 and ps6 are out. 
due may 5th. 11:59pm.
final exam: thrs may 11 2-5pm PAI3.02

testing web apps. how do you automate testing of web apps such as the graph coverage web application?
FINAL EXAM BASICS: CHAPTERS 1-6 + TOPICS ON SLIDES.
java pth finder. non-deterministic choice and symbolic execution.
structure generation using repOk methods. 
symbolic execution.

DO THE FINAL EXAM QUESTIONS. the jpf stuff is not in the book. 
the slides should be on canvas. 
